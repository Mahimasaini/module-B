#include<iostream>
#include<climits>
using namespace std;
    
    int findMinimumDistance(int distance[], bool checkVisitedShortestVertex[]) 
    {
        int minimum=INT_MAX,ind;
        for(int k=0;k<6;k++) 
        {
            if(checkVisitedShortestVertex[k]==false && distance[k]<=minimum)      
            {
                minimum=distance[k];
                ind=k;
            }
        }
        return ind;
    }
    
    void DijkstraProgram(int graph[6][6],int sourceVertex)
    {
        int distance[6];                             
        bool checkVisitedShortestVertex[6];
        
         
        for(int k = 0; k<6; k++)
        {
            distance[k] = INT_MAX;
            checkVisitedShortestVertex[k] = false;    
        }
        
        distance[sourceVertex] = 0;              
        
        for(int k = 0; k<6; k++)                           
        {
            int minimumDistance=findMinimumDistance(distance,checkVisitedShortestVertex); 
            checkVisitedShortestVertex[minimumDistance]=true;
            for(int k = 0; k<6; k++)                  
            {
                if(!checkVisitedShortestVertex[k] && graph[minimumDistance][k] && distance[minimumDistance]!=INT_MAX && distance[minimumDistance]+graph[minimumDistance][k]<distance[k])
                    distance[k]=distance[minimumDistance]+graph[minimumDistance][k];
            }
        }
        for(int k = 0; k<6; k++)                      
        { 
            char str=65+k; 
            cout<<"The shortest distance of vertex "<<str<<" from the source vertex A is "<<distance[k]<<endl;        }
    }
    
    int main()
    {
        int graph[6][6]={
            {0, 1, 2, 0, 0, 0},
            {1, 0, 0, 5, 1, 0},
            {2, 0, 0, 2, 3, 0},
            {0, 5, 2, 0, 2, 2},
            {0, 1, 3, 2, 0, 1},
            {0, 0, 0, 2, 1, 0}};
        DijkstraProgram(graph,0);
        return 0;                           
    }
