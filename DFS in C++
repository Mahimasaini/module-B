#include <iostream>
#include <list>
using namespace std;
  
  class Graph {
    int noOfVertices;
    list<int> *adjacencyList;
    bool *visitedVertices;
  
     public:
    Graph(int V);
    void addEdge(int startingVertex, int endingVertex);
    void depthFirstSearchProgram(int vertex);
  };
  
  Graph::Graph(int vertices) {
    noOfVertices = vertices;
    adjacencyList = new list<int>[vertices];
    visitedVertices = new bool[vertices];
  }
  
  void Graph::addEdge(int startingVertex, int endingVertex) {
    adjacencyList[startingVertex].push_front(endingVertex);
  }
  
  void Graph::depthFirstSearchProgram(int vertex) {
    visitedVertices[vertex] = true;
    list<int> listOfVertices = adjacencyList[vertex];
  
    cout << vertex << " ";
  
    list<int>::iterator i;
    for (i = listOfVertices.begin(); i != listOfVertices.end(); ++i)
      if (!visitedVertices[*i])
        depthFirstSearchProgram(*i);
  }
  
  int main() {
    Graph g(5);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3,4);
    g.addEdge(2,4);
  
    g.depthFirstSearchProgram(2);
  
    return 0;
  }
  
