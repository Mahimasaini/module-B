function BellmanFordProgram(graph, Vertices, Edges, sourceVertex)
{
	var distance = Array(Vertices).fill(1000000000);
	distance[sourceVertex] = 0;

	for (var i = 0; i < Vertices - 1; i++)
	{
		for (var j = 0; j < Edges; j++)
		{
			if ((distance[graph[j][0]] + graph[j][2]) < distance[graph[j][1]])
				distance[graph[j][1]] = distance[graph[j][0]] + graph[j][2];
		}
	}

	for (var edge = 0; edge < Edges; edge++)
	{
		var x = graph[edge][0];
		var y = graph[edge][1];
		var weightOfEdge = graph[edge][2];
		if ((distance[x] != 1000000000) &&
				(distance[x] + weightOfEdge < distance[y]))
		console.log("Graph contains negative weight cycle");
	}

	for (var vertex = 0; vertex < Vertices; vertex++)
	console.log("The shortest distance of vertex ",vertex , "from the source vertex 0 is",distance[vertex]);
}

var Vertices = 5; 
var Edges = 8; 
var graph = [[ 0, 1, -1 ], [ 0, 2, 4 ],
				[ 1, 2, 3 ], [ 1, 3, 2 ],
				[ 1, 4, 2 ], [ 3, 2, 5 ],
				[ 3, 1, 1 ], [ 4, 3, -3 ]];
BellmanFordProgram(graph, Vertices, Edges, 0);

