#include <iostream>
#include <list>
#include <stack>
using namespace std;

class Graph {
	int Vertices;

	list<int>* adj;

	void recursivelySortingVertices(int v, bool visitedVertex[],
							stack<int>& Stack);

public:
	Graph(int Vertices);

	void addEdge(int startingVertex, int endingVertex);
	void topologicalSortProgram();
};

Graph::Graph(int Vertices)
{
	this->Vertices = Vertices;
	adj = new list<int>[Vertices];
}

void Graph::addEdge(int startingVertex, int endingVertex)
{
	adj[startingVertex].push_back(endingVertex);
}

void Graph::recursivelySortingVertices(int v, bool visitedVertex[],
								stack<int>& Stack)
								{
	visitedVertex[v] = true;
	list<int>::iterator i;
	for (i = adj[v].begin(); i != adj[v].end(); ++i)
		if (!visitedVertex[*i])
			recursivelySortingVertices(*i, visitedVertex, Stack);

	Stack.push(v);
}

void Graph::topologicalSortProgram()
{
	stack<int> Stack;

	bool* visitedVertex = new bool[Vertices];
	for (int i = 0; i < Vertices; i++)
		visitedVertex[i] = false;

	for (int i = 0; i < Vertices; i++)
		if (visitedVertex[i] == false)
			recursivelySortingVertices(i, visitedVertex, Stack);

	while (Stack.empty() == false) {
		cout << Stack.top() << " ";
		Stack.pop();
	}
}

int main()
{
	Graph graph(6);
	graph.addEdge(5, 2);
	graph.addEdge(5, 0);
	graph.addEdge(4, 0);
	graph.addEdge(4, 1);
	graph.addEdge(2, 3);
	graph.addEdge(3, 1);

	cout << "The Topological Sorting of the given graph is : " ;
	graph.topologicalSortProgram();
	return 0;
}
