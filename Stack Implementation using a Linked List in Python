class Node:
	
	def __init__(self,data):
		self.data = data
		self.next = None
	
class Stack:
	
	def __init__(self):
		self.head = None
	
	def isStackEmpty(self):
	    
		if self.head == None:
			return True
		else:
			return False
	
	def pushInStack(self,data):
	    
		if self.head == None:
			self.head=Node(data)
		else:
			newnode = Node(data)
			newnode.next = self.head
			self.head = newnode
			print(data, " is pushed into the stack.")
	
	def popFromStack(self):
	    
		if self.isStackEmpty():
			return None
		else:
			removedNodeFromStack = self.head
			self.head = self.head.next
			removedNodeFromStack.next = None
			return removedNodeFromStack.data
	
	def peekInStack(self):
		
		if self.isStackEmpty():
			return None
		else:
			return self.head.data
	
	def displayStack(self):
		
		iternode = self.head
		if self.isStackEmpty():
			print("Stack is  Underflow!")
		else:
			
			while(iternode != None):
				print(iternode.data,end = " ")
				iternode = iternode.next
			return
		
stackNew = Stack()

stackNew.pushInStack(11)
stackNew.pushInStack(22)
stackNew.pushInStack(33)
stackNew.pushInStack(44)

print("\n-------------------------------------")
print("Elements of stack are : ")
stackNew.displayStack()

print("\n-------------------------------------")
print("\n",stackNew.peekInStack() ," is the peek element from the stack.")

print("\n-------------------------------------")
print(stackNew.popFromStack()," is the popped element from the stack.")
print("\n-------------------------------------")

print("\nElements of stack after deleting  peek element : ")
stackNew.displayStack()


