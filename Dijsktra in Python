import sys

class Graph():

	def __init__(self, vertices):
		self.V = vertices
		self.graph = [[0 for column in range(vertices)]
					for row in range(vertices)]

	def showShortestDistance(self, distance):
		for node in range(self.V):
			print("The shortest distance of  vertex",node, " from the source vertex 0 is:",distance[node])

	def findMinimumDistance(self, distance, checkVisitedShortestVertex):
		min = sys.maxsize

		for u in range(self.V):
			if distance[u] < min and checkVisitedShortestVertex[u] == False:
				min = distance[u]
				minIndexValue = u

		return minIndexValue

	def DijsktraProgram(self, sourceVertex):
		distance = [sys.maxsize] * self.V
		distance[sourceVertex] = 0
		checkVisitedShortestVertex = [False] * self.V

		for cout in range(self.V):
			x = self.findMinimumDistance(distance, checkVisitedShortestVertex)
			checkVisitedShortestVertex[x] = True

			for y in range(self.V):
				if self.graph[x][y] > 0 and checkVisitedShortestVertex[y] == False and \
				distance[y] > distance[x] + self.graph[x][y]:
						distance[y] = distance[x] + self.graph[x][y]

		self.showShortestDistance(distance)

dijsktraGraph = Graph(9)
dijsktraGraph.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0],
		[4, 0, 8, 0, 0, 0, 0, 11, 0],
		[0, 8, 0, 7, 0, 4, 0, 0, 2],
		[0, 0, 7, 0, 9, 14, 0, 0, 0],
		[0, 0, 0, 9, 0, 10, 0, 0, 0],
		[0, 0, 4, 14, 10, 0, 2, 0, 0],
		[0, 0, 0, 0, 0, 2, 0, 1, 6],
		[8, 11, 0, 0, 0, 0, 1, 0, 7],
		[0, 0, 2, 0, 0, 0, 6, 7, 0]
		];

dijkstraGraph.DijsktraProgram(0);

