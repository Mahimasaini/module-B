class Node:
    def __init__(self, NodeValue):
        self.NodeValue = NodeValue
        self.leftNode = None
        self.rightNode = None


def inOrderTraversal(rootNode):
    if rootNode is not None:
        inOrderTraversal(rootNode.leftNode)
        print(str(rootNode.NodeValue) + "->", end=' ')
        inOrderTraversal(rootNode.rightNode)

def insertNodeInBST(node, NodeValue):

    if node is None:
        return Node(NodeValue)

    if NodeValue < node.NodeValue:
        node.leftNode = insertNodeInBST(node.leftNode, NodeValue)
    else:
        node.rightNode = insertNodeInBST(node.rightNode, NodeValue)

    return node


def nodeWithMinimumValue(node):
    instanceNode = node

    while(instanceNode.leftNode is not None):
        instanceNode = instanceNode.leftNode

    return instanceNode


def removeNodeFromBST(rootNode, NodeValue):

    if rootNode is None:
        return rootNode

    if NodeValue < rootNode.NodeValue:
        rootNode.leftNode = removeNodeFromBST(rootNode.leftNode, NodeValue)
    elif(NodeValue > rootNode.NodeValue):
        rootNode.rightNode = removeNodeFromBST(rootNode.rightNode, NodeValue)
    else:
        if rootNode.leftNode is None:
            temp = rootNode.rightNode
            rootNode = None
            return temp

        elif rootNode.rightNode is None:
            temp = rootNode.leftNode
            rootNode = None
            return temp

        temp = nodeWithMinimumValue(rootNode.rightNode)

        rootNode.NodeValue = temp.NodeValue

        rootNode.rightNode = removeNodeFromBST(rootNode.rightNode, temp.NodeValue)

    return rootNode


rootNode = None
rootNode = insertNodeInBST(rootNode, 8)
rootNode = insertNodeInBST(rootNode, 3)
rootNode = insertNodeInBST(rootNode, 1)
rootNode = insertNodeInBST(rootNode, 6)
rootNode = insertNodeInBST(rootNode, 7)
rootNode = insertNodeInBST(rootNode, 10)
rootNode = insertNodeInBST(rootNode, 14)
rootNode = insertNodeInBST(rootNode, 4)

print("Inorder traversing of the binary search tree after inserting nodes:", end=' ')
inOrderTraversal(rootNode)

print("\n\nBinary search tree after deleting node 10:")
rootNode = removeNodeFromBST(rootNode, 10)
inOrderTraversal(rootNode)
