#include <bits/stdc++.h>
using namespace std;

class Node {
public:
	int data;
	Node* nextValue;

	Node(int data)
	{
		this->data = data;
		nextValue = NULL;
	}
};

Node* front = NULL;
class Linkedlist {
public:
	void insertIntoLinkedList(int value)
	{
		Node* newNode = new Node(value);
		if (front == NULL)
			front = newNode;
		else {
			newNode->nextValue = front;
			front = newNode;
		}
	}

	bool isLoopExistInLinkedList()
	{
		Node *slowPointer = front,
			*fastPointer = front;

		while (slowPointer != NULL
			&& fastPointer != NULL
			&& fastPointer->nextValue != NULL) {
			slowPointer = slowPointer->nextValue;
			fastPointer = fastPointer->nextValue->nextValue;
			if (slowPointer == fastPointer)
				return 1;
		}
		return 0;
	}
};

int main()
{
	Linkedlist list;
	list.insertIntoLinkedList(10);
	list.insertIntoLinkedList(20);
	list.insertIntoLinkedList(30);
	list.insertIntoLinkedList(40);
	list.insertIntoLinkedList(50);

	Node* temp = front;
	while (temp->nextValue != NULL)
		temp = temp->nextValue;

	temp->nextValue = front;

	if (list.isLoopExistInLinkedList())
		cout << "There is loop exists in the given linked list.";
	else
		cout << "There is no loop exists in the given linked list.";

	return 0;
}
